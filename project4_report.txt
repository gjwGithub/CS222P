1. Basic information
Team number (e.g., 01) : 13
#1 Student ID : 86808780
#1 Student Name : Jiawei Gu
#2 Student ID : 48895604
#2 Student Name : Yuliang Liu
OS (bit) : Ubuntu 16.04 (64-bit)
gcc version : 5.4.0


2. Catalog information about Index
- Show your catalog information about an index (tables, columns). 
We add a "hasIndex" column in Column table to represent whether the attribute has an index file. Now the Column table has the following columns:
-----------------------------------
ID|   column name   | column type |
-----------------------------------
1 |    table-id     |     int     |
-----------------------------------
2 |   column-name   | varchar(50) |
-----------------------------------
3 |   column-type   |     int     |
-----------------------------------
4 |  column-length  |     int     |
-----------------------------------
5 | column-position |     int     |
-----------------------------------
6 |  startVersion   |     int     |
-----------------------------------
7 |   endVersion    |     int     |
-----------------------------------
8 |    hasIndex     |     int     |
-----------------------------------


3. Block Nested Loop Join (If you have implemented this feature)
- Describe how your block nested loop join works (especially, how you manage the given buffers.)
In our project, we set two vector, outers which store the r records and inners which store the s records. In the block nested loop join, we scan each outers records and compare all inners records. And then update the outers vectors and inners vectors.

4. Index Nested Loop Join (If you have implemented this feature)
- Describe how your grace hash join works.
Every time when I am going to fetch a record from INL join, first I will fetch a record from outer iterator, then I will fetch a record from inner index scan iterator, and combine these two records.


5. Grace Hash Join (If you have implemented this feature)
- Describe how your grace hash join works (especially, in-memory structure).
We use the mode to map the partitions and then each time when read each partitions, establish a map to map the value and join with the s records.


6. Aggregation
- Describe how your aggregation (basic, group-based hash) works.
For basic aggregation, I will traverse the value in specific attribute of all the records, and calculate their sum, count, average, min, max value.
For group-based aggregation, besides what I have done in basic aggregation, I will also have a map to hold all the aggregation values for each kind of values from the attribute, and output their corresponding result in the end.


7. Implementation Detail
- Have you added your own source file (.cc or .h)?
No

- Have you implemented any optional features? Then, describe them here.
No

- Other implementation details:


6. Other (optional)
- Freely use this section to tell us about things that are related to the project 4, but not related to the other sections (optional)

